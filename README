README file for the bitu
========================

This program is intended to be a simple, generic and extensible jabber
bot. One of the main goals in the start of the project was to provide
a presence based monitoring system. This is the reason for choosing
xmpp.

After some lines of code were writen we saw that a generic sollution
could be implemented. And then, we did it =D

In the next few lines bellow you'll know how to install, use and patch
it.

Installation
~~~~~~~~~~~~

Before anything you have to install two basic libraries to be able to
see bitu working properly. Take a look at this::

    ------
   | bitu |
    ------
     |
    ----------
   | taningia |
    ----------
     |
    ---------
   | iksemel |
    ---------

Iksemel is available in various systems, including the Debian
GNU/Linux. If you're using Debian, you can install this taningia
dependency by issuing the command::

    # aptitude install libiksemel-dev

I've used libiksemel 1.2 to write taningia and bitu. In a very quick
test things went bad using a newer version...

Now follow the next stuff to install taningia.

 taningia
 --------

 It is a generic comunication library that provides a simple xmpp
 client lib (among other things).

 To install it, you should first download it using the following
 command::

     $ git clone http://git.alfaiati.net/lincoln/taningia.git

 After that, enter in the downloaded directory and run the autogen.sh
 script, like this::

     $ cd taningia
     $ ./autogen.sh

 The `autogen.sh' script will also call the `configure' script. So you
 can pass the configure params directly to the `autogen.sh' one. Like
 this::

     $ ./autogen.sh --prefix=/tmp/mytestbase

 After that, you should compile the library. To do this, you can do
 the following::

     $ make

 But wait! If you're planning to use this library and never see a
 bug... you should give up right now (just joking =D). But it is wise
 to compile it with debug support when writting applications based on
 it. To do it, execute the following command::

     $ make CFLAGS="-g -O0 -DDEBUG"

 bitu
 ----

 Now it is time to install the bitu program itself. It is quite easy
 to do this. Just follow the same stuff you did with taningia::

     $ ./autogen.sh && ./configure && make
     $ sudo make install


 To get more information about the installation, please consulte the
 `INSTALL' file.

Basic usage
~~~~~~~~~~~

Setup your environment
----------------------

Since it is a jabber bot, you'll need an already configured jabber
server. All tests were done using `ejabberd' (also available in
Debian).

First of all. Go to the ejabberd administration and create two
users. For example, the `admin@localhost' and `server@localhost'. I
suggest you to use `gajim' to make some tests (and to use to jabber
stuff at all. It is just the best jabber client ever!)

Connect to the `admin@localhost' in gajim. And then, add the
`server@localhost' to your roster. Currently, the jabber bot does not
accept any presence subscription. You'll have to do it by using the
ejabberd web interface. Open a browser and point it to the
http://localhost:5280/admin address. Follow the way "Virtual Hosts" ->
"localhost" -> "Users" -> "server@localhost" -> "Roster" and then
you'll see the authorization request of the admin user.


Loading plugins
---------------

We currently have two builtin plugins. The cpuinfo and the uptime
ones. Both are installed in $(libdir)/bitu. To use them, you will have
to create a new file with the name of the .so files. Like this::

  libprocessor.so
  libuptime.so

Save the file with any name anywhere. Now, you have to make sure that
the $(libdir)/bitu dir is inside LD_LIBRARY_PATH envvar. Do the
following to make sure::

  $ export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/path/to/your/lib/bitu

We're getting closer and closer to see it working, just follow the
last step and see what we can do =D

Launching bitu
--------------

Now, you just have to call bitu with the connection parameters and
with the plugin list file. Like this::

     $ bitu --jid=server@localhost \
          --password=<yourpasswd>  \
          --plugins-file=/path-to-your-plugins-file

If you receive any ConnectionError stuff, try to inform the host ip
with the param --host. like this::

     $ bitu --jid=server@localhost \
          --password=<yourpasswd>  \
          --host=127.0.0.1 \
          --plugins-file=/path-to-your-plugins-file
